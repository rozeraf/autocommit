[ai]
# DEPRECATED: These top-level settings are for backward compatibility.
# Please define providers in the [ai.providers] section below.
model = "deepseek/deepseek-chat-v3.1:free"
api_url = "https://openrouter.ai/api/v1"
temperature = 0.3
max_tokens = 1000
timeout = 45

# New provider-based configuration
base_provider = "openrouter"
context_switching = true

[ai.providers.openrouter]
model = "deepseek/deepseek-chat-v3.1:free"
api_url = "https://openrouter.ai/api/v1"
temperature = 0.3
max_tokens = 1000
timeout = 45
env_key = "OPENROUTER_API_KEY"

[ai.providers.openai] 
model = "gpt-4o-mini"
api_url = "https://api.openai.com/v1"
temperature = 0.3
max_tokens = 1000
timeout = 30
env_key = "OPENAI_API_KEY"

[ai.providers.anthropic]
model = "claude-3-5-sonnet-20240620"
api_url = "https://api.anthropic.com/v1"
temperature = 0.3
max_tokens = 1000
timeout = 60
env_key = "ANTHROPIC_API_KEY"

[format]
max_subject_length = 70
require_body_for_features = true
enforce_conventional = true
allowed_types = ["feat", "fix", "docs", "style", "refactor", "perf", "test", "build", "ci", "chore", "revert"]

[context]
wip_keywords = ["TODO", "FIXME", "WIP", "HACK", "XXX", "NOTE"]
auto_detect = true

[ai.prompts]
default = '''Your task is to generate a commit message based on the provided diff, following the Conventional Commits specification.

RULES:
1. Output ONLY the commit message text - no explanations, markdown blocks, or extra text.

2. Format: `type(scope): subject`
   - Subject: max 50 chars, imperative mood ("add", not "added")
   - Body: detailed bullet points if needed
   - Footer: BREAKING CHANGE if applicable

3. Scope selection:
   - Use specific module/component names when possible
   - Examples: api, ui, config, models, tests, git_utils
   - Omit scope only for broad changes across multiple areas

4. Types (strict priority order):
   - `feat`: New features or capabilities
   - `fix`: Bug fixes and error corrections  
   - `refactor`: Code restructuring without behavior change
   - `perf`: Performance improvements
   - `test`: Test additions or modifications
   - `docs`: Documentation changes
   - `style`: Formatting, whitespace, etc.
   - `build`: Dependencies, build system
   - `ci`: CI/CD configuration
   - `chore`: Maintenance tasks
   - `revert`: Reverting previous commits

5. Body structure (when needed):
   - Use bullet points with hyphens (-)
   - Start each point with action verb
   - Group related changes logically
   - Explain WHY for complex changes

6. Quality checks:
   - Subject must be imperative mood
   - No period at end of subject
   - Body separated by blank line
   - Each bullet point is a complete thought'''
