#!/usr/bin/env python3
"""
Git Auto Commit - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é –ò–ò
"""

import subprocess
import os
import sys
import requests
import json
from typing import Optional, Tuple
from dotenv import load_dotenv

load_dotenv()

def run_command(cmd: str, show_output: bool = False) -> tuple[str, int]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–≤–æ–¥ –∏ –∫–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    try:
        if show_output:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ (—Ç–∏–ø–∞ husky)
            result = subprocess.run(
                cmd, 
                shell=True, 
                text=True, 
                check=False
            )
            return "", result.returncode
        else:
            result = subprocess.run(
                cmd, 
                shell=True, 
                capture_output=True, 
                text=True, 
                check=False
            )
            return result.stdout.strip(), result.returncode
    except Exception as e:
        return str(e), 1

def get_git_diff() -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç git diff --cached"""
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
    print("üìÅ –î–æ–±–∞–≤–ª—è—é —Ñ–∞–π–ª—ã...")
    _, code = run_command("git add .")
    if code != 0:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤")
        return None
    
    # –ü–æ–ª—É—á–∞–µ–º diff
    diff, code = run_command("git diff --cached")
    if code != 0:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ diff")
        return None
    
    if not diff.strip():
        print("‚ÑπÔ∏è  –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞")
        return None
    
    return diff

def parse_ai_response(response: str) -> Tuple[str, Optional[str]]:
    """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –ò–ò –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞"""
    lines = response.strip().split('\n')
    
    commit_msg = ""
    description = ""
    
    # –ò—â–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    if len(lines) == 1:
        # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
        commit_msg = lines[0].strip()
    else:
        # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ - –æ–ø–∏—Å–∞–Ω–∏–µ
        commit_msg = lines[0].strip()
        if len(lines) > 1:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –±–µ—Ä–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
            desc_lines = [line.strip() for line in lines[1:] if line.strip()]
            if desc_lines:
                description = '\n'.join(desc_lines)
    
    # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ—Ñ–∏–∫—Å—ã –∏ –∫–∞–≤—ã—á–∫–∏
    commit_msg = commit_msg.replace('–°–æ–æ–±—â–µ–Ω–∏–µ:', '').replace('Message:', '').strip()
    commit_msg = commit_msg.strip('"\'`')
    
    return commit_msg, description if description else None

def generate_commit_message(diff: str) -> Optional[Tuple[str, Optional[str]]]:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter API"""
    api_key = os.getenv("OPENROUTER_API_KEY")
    if not api_key:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENROUTER_API_KEY")
        return None
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": "meta-llama/llama-3.1-8b-instruct:free",
        "messages": [
            {
                "role": "system",
                "content": """–ì–µ–Ω–µ—Ä–∏—Ä—É–π —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ conventional commits. 
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
- –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ (–¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤)
- –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞: –ø—É—Å—Ç–∞—è (–µ—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ)
- –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏: –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)

–ò—Å–ø–æ–ª—å–∑—É–π —Ç–∏–ø—ã: feat, fix, docs, style, refactor, test, chore.
–û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–º–∏—Ç–∞, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤."""
            },
            {
                "role": "user",
                "content": f"–°–æ–∑–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞ –¥–ª—è —ç—Ç–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n{diff}"
            }
        ]
    }
    
    try:
        print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞...")
        response = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        if response.status_code != 200:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return None
        
        data = response.json()
        ai_response = data["choices"][0]["message"]["content"].strip()
        
        commit_msg, description = parse_ai_response(ai_response)
        
        return commit_msg, description
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API: {e}")
        return None

def commit_changes(message: str, description: Optional[str] = None) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–∏—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º"""
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    full_message = message
    if description:
        full_message = f"{message}\n\n{description}"
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –∫–∞–≤—ã—á–∫–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    escaped_message = full_message.replace('"', '\\"').replace('`', '\\`')
    
    print("üîÑ –°–æ–∑–¥–∞—é –∫–æ–º–º–∏—Ç...")
    print("=" * 50)
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º show_output=True —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å –≤—ã–≤–æ–¥ husky –∏ –¥—Ä—É–≥–∏—Ö —Ö—É–∫–æ–≤
    _, code = run_command(f'git commit -m "{escaped_message}"', show_output=True)
    
    print("=" * 50)
    
    if code == 0:
        print(f"‚úÖ –ö–æ–º–º–∏—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
        return True
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–∏—Ç–∞ (–∫–æ–¥: {code})")
        return False

def show_confirmation(commit_msg: str, description: Optional[str]) -> bool:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–æ–º–º–∏—Ç–æ–º"""
    print("\n" + "=" * 60)
    print("üìù –ü–†–ï–î–ü–†–û–°–ú–û–¢–† –ö–û–ú–ú–ò–¢–ê")
    print("=" * 60)
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {commit_msg}")
    if description:
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    print("=" * 60)
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if len(sys.argv) > 1 and sys.argv[1] in ["-y", "--yes"]:
        return True
    
    confirm = input("–°–¥–µ–ª–∞—Ç—å –∫–æ–º–º–∏—Ç? [Y/n]: ").lower()
    return confirm in ("", "y", "yes", "–¥–∞")

def test_api_key():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API –∫–ª—é—á"""
    api_key = os.getenv("OPENROUTER_API_KEY")
    api_url = os.getenv("OPENROUTER_API_URL", "https://openrouter.ai/api/v1/chat/completions")
    model = os.getenv("OPENROUTER_MODEL", "anthropic/claude-3.5-sonnet")
    
    if not api_key:
        print("‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENROUTER_API_KEY –≤ .env —Ñ–∞–π–ª–µ")
        return False
    
    headers = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }
    
    payload = {
        "model": model,
        "messages": [{"role": "user", "content": "Hello"}],
        "max_tokens": 10
    }
    
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é API –∫–ª—é—á...")
        print(f"üåê URL: {api_url}")
        print(f"ü§ñ –ú–æ–¥–µ–ª—å: {model}")
        
        response = requests.post(
            api_url,
            headers=headers,
            json=payload,
            timeout=30
        )
        
        print(f"üì° –°—Ç–∞—Ç—É—Å: {response.status_code}")
        if response.status_code == 200:
            print("‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            return True
        else:
            print(f"‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω —Ñ–ª–∞–≥ --test-api, —Ç–µ—Å—Ç–∏—Ä—É–µ–º API –∏ –≤—ã—Ö–æ–¥–∏–º
    if len(sys.argv) > 1 and sys.argv[1] == "--test-api":
        test_api_key()
        return
    
    print("ü§ñ Git Auto Commit - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–∏—Ç–∞ –¥–ª—è staged —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º—ã –≤ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏
    _, code = run_command("git rev-parse --git-dir")
    if code != 0:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è staged —Ñ–∞–π–ª–æ–≤
    diff = get_git_diff()
    if not diff:
        sys.exit(1)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞
    result = generate_commit_message(diff)
    if not result:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ–º–º–∏—Ç–∞")
        print("üí° –ü–æ–ø—Ä–æ–±—É–π: python3 gac.py --test-api")
        sys.exit(1)
    
    commit_msg, description = result
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if show_confirmation(commit_msg, description):
        success = commit_changes(commit_msg, description)
        if success:
            print("üéâ –ì–æ—Ç–æ–≤–æ!")
        else:
            sys.exit(1)
    else:
        print("‚ùå –ö–æ–º–º–∏—Ç –æ—Ç–º–µ–Ω–µ–Ω")
        sys.exit(1)

if __name__ == "__main__":
    main()